version: '3.8'

services:
  mailhog:
    image: mailhog/mailhog
    tty: true
    ports:
      - '1025:1025'
      - '8025:8025'
    restart: on-failure
    networks:
      - network
  database:
    image: 'postgres:14-alpine'
    container_name: ipr-db
    ports:
      - '${DBPORT}:5432'
    environment:
      PGPASSWORD: '${DBROOTPASS}'
      POSTGRES_DB: '${DBNAME}'
      POSTGRES_USER: '${DBUSER}'
      POSTGRES_PASSWORD: '${DBPASS}'
    volumes:
      - db-vol:/var/lib/postgresql/data
    networks:
      - network
    healthcheck:
      test:
        [
          'CMD',
          'pg_isready',
          '-q',
          '-d',
          '${DBNAME}',
          '-U',
          '${DBUSER}',
        ]
      retries: 3
      timeout: 5s

  php-fpm:
    build:
      args:
        WWWGROUP: ${GROUP}
        WWWGID: ${GID}
        WWWUSER: ${USER}
        WWWUID: ${UID}
        user: ${USER}
        uid: ${UID}
      context: ../
      dockerfile: ./docker/php/Dockerfile
      target: develop
    image: ipr
    container_name: ipr-php-fpm
    restart: unless-stopped
    working_dir: /var/www/html
    environment:
      WWWUSER: '${USER}'
      WWWUID: ${UID}
      PHP_IDE_CONFIG: 'serverName=ipr.local'
    volumes:
      - ./../:/var/www/html
    networks:
      - network
    depends_on:
      - database

  nginx:
    image: nginx:stable-alpine
    container_name: ipr-nginx
    restart: unless-stopped
    environment:
      - NGINX_HOST=${HOST}
      - NGINX_PORT=${PORT}
    ports:
      - "${PORT}:80"
    volumes:
      - ./../:/var/www/html
      - ./nginx/logs:/var/log/nginx
      - ./nginx/templates:/etc/nginx/templates
    networks:
      - network
    depends_on:
      - php-fpm

  swagger:
      image: swaggerapi/swagger-ui
      environment:
          BASE_URL: /swagger
          URLS: '[ { name: "swagger", url: "/swagger/docs/main.yaml"} ]'
      volumes:
          - ./../swagger:/usr/share/nginx/html/docs
      networks:
          - network

  redis:
      image: redis:alpine
      container_name: ipr-redis
      volumes:
          - redis-vol:/data
      ports:
          - "6379:6379"
      networks:
        - network

  rabbitmq:
      build:
          context: ./
          dockerfile: rabbitmq/Dockerfile
      container_name: ipr-rabbitmq
      environment:
          RABBITMQ_DEFAULT_USER: 'guest'
          RABBITMQ_DEFAULT_PASS: 'guest'
      ports:
          - 5672:5672
          - 15672:15672
      volumes:
          - rabbitmq-data:/var/lib/rabbitmq
      networks:
          network:
              ipv4_address: 10.0.0.10

networks:
  network:
    driver: bridge
    name: ipr-network
    ipam:
        driver: default
        config:
            -   subnet: 10.0.0.0/24
                gateway: 10.0.0.1

volumes:
  db-vol:
    driver: local
    name: ipr-db-vol
  redis-vol:
      driver: local
      name: ipr-redis-vol
  rabbitmq-data:
      driver: local
      name: ipr-rabbitmq-vol
